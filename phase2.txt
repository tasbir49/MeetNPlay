Late by one day

link to deployed app:
https://arcane-falls-88322.herokuapp.com/home

Out web app is a meetup app for local multiplayer games.
Users can make posts to host a gaming session and other users and request
to be invited, upon being invited, users can now more details about the post.

User Instructions:
    By clicking on the top right profile picture, user may select the option
    to make a new most. After filling in the information, they can submit the
    form to create the new post

    In the main home page, users can view multiple different posts from other users
    They are allowed to access the pages of posts that they are hosting or ones
    that they have been invited to. Otherwise it will show either that the post
    is full, waiting for invite, or prompts the user to submit an invite request
    They can also report different posts and the creator of the post by clicking
    on the report button at the bottom of the picture.

    On the left of the homepage there are a series of filters and sorting options
    that the users can choose to their personal preferences.
    They can also navigate the different pages of posts at the bottom of the screen

    To view your own profile, click the profile picture on the top right corner
    of the screen on the homepage.

    On the profile page, the user may change any information on there except for
    member since field, as well as look for other users.

    add more


Admin Instructions:
    This is mostly the same as the User:

    Additional Features:
        An admin can view any post regardless if they are full or not or invited
        or not.
        They can shut down any users by banning on the soon-to-be banned user's
        profile page
        They can view all the open reports submitted by going to the top right corner
        on their page and clicking the profile picture, they can see an extra field
        called reports.

        They can change anyones password without knowing their original password on their profile page
        They can edit users info and profile picture, and revoke or give admin rights while on their page
        They have the same priveleges as the creator of





Login Credentials:

Regular Users:
username: tasbir
password: password

username: tasbir49
password: password

username: Bond
password: password

ADMIN:
username: superman
password: superman



Routes




// route for root; redirect to home
app.get('/', sessionChecker, (req, res)
// route for login
'/login'

// route for login
app.route('/login')

//getting a post page (NOT THE JSON, THE ACTUAL WEB PAGE)
app.get('/post/view/:id', authenticate, (req, res)

//getting a post's edit page
app.get('/post/edit/:id', authenticate, (req, res)

//get all posts as json array with items relevant for home page as well as user session info
//adds fields for creatorname, if the session user is a member, or requeested invite, and isadmin
// in
//the json
app.get('/posts', (req,res)

//creates an invite request by the logged in user to the post
//and returns "success" or "failure" or "post is full"
app.post('/api/invitereq/:post_id/', authenticate,  (req, res)

//getting a page to make post
app.get('/post/make', authenticate, (req, res)

//creates a new post, assuming a json body
//that matches the schema ,
//using req.sessionuser for crearor
//This means creator SHOULD NOT be in the request body
app.post('/api/post/create', authenticate, (req, res)

//editing a post, assuming json body has all fields
//the ref fields should be OBJECT IDs, use this for editing any part of post
//EXCEPT CREATOR, AND DATE MADE (you can change these, but why would you)
app.patch('/api/post/edit/:id', authenticate, (req, res)

//getting a users page (NOT THE JSON, THE ACTUAL WEBPAGE)
app.get('/users/:username', authenticate, (req, res)

//changes user info , isBanned, password, isAdmin must be done by an admin
//expects JSON body, returns editted json of user
app.patch('/api/users/changeInfo/:username', authenticate, (req,res)

//just expects a password, returns json of user, ignores other fields
//returns user json
app.patch('/api/users/changePassword/:username', authenticate,  (req,res)

//creates a report, assuming a json body that matches the schema
//expects only  the perpetrator's name  and content, other fields will be overwritten
//sends a json of the report
app.post('/reports/api/create', authenticate, (req, res)

//closes report with id
//expects only  the id, other fields are ignored
//sends a json of the report
app.post('/reports/api/close/:id', authenticate, (req, res)

//Route to get all teh active  reports if you are admin
app.get('/reports', authenticate, (req,res)

//homepage
app.get('/home', (req, res)

// User login and logout and creation routes
app.post('/login/start', (req, res)

//logout route
app.get('/logout', (req, res)

//get 10 game id and cover from igdb
app.get('/igdb',(req,res)


//get igdb given a name
app.get('/igdb/:name',(req,res)

//adds a new comment to a post, only expects the content of comment in the body
app.post('/api/comments/:post_id',authenticate,(req,res)

//route to delete comments from posts.,
app.delete('/api/comments/:post_id/:comment_id',authenticate,(req,res)

//route to add a comment to a post
app.post('/users', (req, res)

//update a profile picure
app.post('/update-profile-pic', upload.single('update-profile-pic'), (req, res)
